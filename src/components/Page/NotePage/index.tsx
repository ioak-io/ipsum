import React, { useEffect, useRef, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import './style.scss';
import Topbar from '../../../components/Topbar';
import NoteModel from '../../../model/NoteModel';
import { generateReport, getNoteByReference, saveNote } from './service';
import GraphView from '../../../components/GraphView';
import { useParams } from 'react-router-dom';
import MainSection from '../../../components/MainSection';
import ContentSection from '../../../components/Note/ContentSection';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCircleNodes, faDownload, faFile, faFileAlt, faHome, faLink } from '@fortawesome/free-solid-svg-icons';
import { replaceNotelinkAutoItems } from '../../../store/actions/NotelinkAutoActions';
import { updateNoteItem } from '../../../store/actions/NoteActions';
import { isEmptyAttributes, isEmptyOrSpaces } from '../../../components/Utils';
import { formatDate, formatDateText } from '../../../components/Lib/DateUtils';

interface Props {
  location: any;
  space: string;
}

const NotePage = (props: Props) => {
  const dispatch = useDispatch();
  const authorization = useSelector((state: any) => state.authorization);
  const params = useParams();
  const [note, setNote] = useState<NoteModel | null>(null);
  const [view, setView] = useState<'home' | 'graph'>('home');

  useEffect(() => {
    if (params.id && authorization.isAuth) {
      getNoteByReference(props.space, params.id, authorization).then(
        (response: any) => {
          if (!isEmptyAttributes(response)) {
            setNote(response);
          }
        }
      );
    }
  }, [params, authorization]);


  // const saveChanges = () => {
  //   saveNote(props.space, state, authorization).then((response: any) => {
  //     if (response) {
  //       setState(response);
  //       setView('view');
  //     }
  //   });
  // };

  const onPostNoteSave = (data: any) => {
    setNote(data.note);
    dispatch(updateNoteItem({
      ...data.note,
      summary: isEmptyOrSpaces(data.note.summary) ? data.note.autoGeneratedSummary : data.note.summary
    }));
    dispatch(replaceNotelinkAutoItems({
      newItems: data.notelinks,
      noteRef: data.note.reference
    }));
  }

  return (
    <>
      <div className='note-page page-animate'>
        <Topbar title="Note" space={props.space}>
          <div className="topbar-actions">
            <button
              className={`button ${view === 'home' ? 'active' : ''}`}
              onClick={() => setView('home')}
            >
              <FontAwesomeIcon icon={faFileAlt} />
              <span className="menu-highlight-line" />
            </button>
            <button
              className={`button ${view === 'graph' ? 'active' : ''}`}
              onClick={() => setView('graph')}
            >
              <FontAwesomeIcon icon={faCircleNodes} />
              <span className="menu-highlight-line" />
            </button>
          </div>
        </Topbar>
        {/* <MainSection> */}
        {note && view === 'home' && <MainSection>
          <ContentSection note={note} space={props.space} onPostNoteSave={onPostNoteSave} />
        </MainSection>}
        {note && view === 'graph' &&
          <GraphView
            space={props.space}
            noteref={note.reference}
            isContextExpanded={false}
          />}
        {/* </MainSection> */}

      </div>
    </>
  );
};

export default NotePage;
